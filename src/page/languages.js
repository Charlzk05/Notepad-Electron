window.API.plainText((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), ''); });
window.API.abap((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'abap'); });
window.API.apex((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'apex'); });
window.API.azcli((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'azcli'); });
window.API.bat((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'bat'); });
window.API.bicep((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'bicep'); });
window.API.cameligo((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'cameligo'); });
window.API.clojure((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'clojure'); });
window.API.coffee((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'coffee'); });
window.API.cpp((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'cpp'); });
window.API.csharp((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'csharp'); });
window.API.csp((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'csp'); });
window.API.css((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'css'); });
window.API.cypher((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'cypher'); });
window.API.dart((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'dart'); });
window.API.dockerfile((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'dockerfile'); });
window.API.ecl((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'ecl'); });
window.API.elixir((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'elixir'); });
window.API.flow9((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'flow9'); });
window.API.freemarker2((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'freemarker2'); });
window.API.fsharp((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'fsharp'); });
window.API.go((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'go'); });
window.API.graphql((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'graphql'); });
window.API.handlebars((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'handlebars'); });
window.API.hcl((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'hcl'); });
window.API.html((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'html'); });
window.API.ini((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'ini'); });
window.API.java((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'java'); });
window.API.javascript((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'javascript'); });
window.API.julia((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'julia'); });
window.API.kotlin((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'kotlin'); });
window.API.less((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'less'); });
window.API.lexon((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'lexon'); });
window.API.liquid((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'liquid'); });
window.API.lua((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'lua'); });
window.API.m3((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'm3'); });
window.API.markdown((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'markdown'); });
window.API.mips((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'mips'); });
window.API.msdax((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'msdax'); });
window.API.mysql((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'mysql'); });
window.API.objectivec((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'objectivec'); });
window.API.pascal((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'pascal'); });
window.API.pascaligo((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'pascaligo'); });
window.API.perl((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'perl'); });
window.API.pgsql((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'pgsql'); });
window.API.php((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'php'); });
window.API.pla((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'pla'); });
window.API.postiats((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'postiats'); });
window.API.powerquery((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'powerquery'); });
window.API.powershell((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'powershell'); });
window.API.protobuf((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'protobuf'); });
window.API.pug((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'pug'); });
window.API.python((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'python'); });
window.API.qsharp((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'qsharp'); });
window.API.r((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'r'); });
window.API.razor((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'razor'); });
window.API.redis((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'redis'); });
window.API.redshift((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'redshift'); });
window.API.restructuredtext((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'restructuredtext'); });
window.API.ruby((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'ruby'); });
window.API.rust((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'rust'); });
window.API.sb((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'sb'); });
window.API.scala((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'scala'); });
window.API.scheme((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'scheme'); });
window.API.scss((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'scss'); });
window.API.shell((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'shell'); });
window.API.solidity((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'solidity'); });
window.API.sophia((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'sophia'); });
window.API.sparql((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'sparql'); });
window.API.sql((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'sql'); });
window.API.st((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'st'); });
window.API.swift((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'swift'); });
window.API.systemverilog((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'systemverilog'); });
window.API.tcl((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'tcl'); });
window.API.twig((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'twig'); });
window.API.typescript((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'typescript'); });
window.API.vb((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'vb'); });
window.API.xml((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'xml'); });
window.API.yaml((event, callback) => { monaco.editor.setModelLanguage(editor.getModel(), 'yaml'); });
